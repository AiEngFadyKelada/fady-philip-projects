# -*- coding: utf-8 -*-
"""XGBoost_Classifier_Telco_Customer_Churn_Prediction_Project_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JkFMngQMDPzmX-TyJy9BuMtrJO68UsIK
"""

!pip install xgboost
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error,confusion_matrix,classification_report,accuracy_score
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.datasets import load_breast_cancer

df = pd.read_csv('telco.csv')
df.head(50)

df.shape

df.info()

df.describe()

df.isnull().sum()

df.drop(['Customer ID'],axis=1,inplace=True)

numeric_cols=list(df.select_dtypes('number').columns)
categorical_cols=list(df.select_dtypes('object').columns)

numeric_cols

categorical_cols

df[numeric_cols].isnull().sum()

df[categorical_cols].isnull().sum()

df['Churn Reason'].unique()

from sklearn.preprocessing import OneHotEncoder
encoder=OneHotEncoder(sparse=False,handle_unknown='ignore')
encoded_data=encoder.fit_transform(df[categorical_cols])

encoded_data=pd.DataFrame(encoded_data,columns=encoder.get_feature_names_out())
k=encoded_data.copy()
k=k[['Churn Reason_Attitude of service provider',
 'Churn Reason_Attitude of support person',
 'Churn Reason_Competitor had better devices',
 'Churn Reason_Competitor made better offer',
 'Churn Reason_Competitor offered higher download speeds',
 'Churn Reason_Competitor offered more data',
 'Churn Reason_Deceased',
 "Churn Reason_Don't know",
 'Churn Reason_Extra data charges',
 'Churn Reason_Lack of affordable download/upload speed',
 'Churn Reason_Lack of self-service on Website',
 'Churn Reason_Limited range of services',
 'Churn Reason_Long distance charges',
 'Churn Reason_Moved',
 'Churn Reason_Network reliability',
 'Churn Reason_Poor expertise of online support',
 'Churn Reason_Poor expertise of phone support',
 'Churn Reason_Price too high',
 'Churn Reason_Product dissatisfaction',
 'Churn Reason_Service dissatisfaction',
 'Churn Reason_nan']]
k.head(50)

encoded_data.columns.unique().tolist()[1172:]

data=pd.concat([df[numeric_cols],encoded_data],axis=1)
data



y=data[['Churn Reason_Attitude of service provider',
 'Churn Reason_Attitude of support person',
 'Churn Reason_Competitor had better devices',
 'Churn Reason_Competitor made better offer',
 'Churn Reason_Competitor offered higher download speeds',
 'Churn Reason_Competitor offered more data',
 'Churn Reason_Deceased',
 "Churn Reason_Don't know",
 'Churn Reason_Extra data charges',
 'Churn Reason_Lack of affordable download/upload speed',
 'Churn Reason_Lack of self-service on Website',
 'Churn Reason_Limited range of services',
 'Churn Reason_Long distance charges',
 'Churn Reason_Moved',
 'Churn Reason_Network reliability',
 'Churn Reason_Poor expertise of online support',
 'Churn Reason_Poor expertise of phone support',
 'Churn Reason_Price too high',
 'Churn Reason_Product dissatisfaction',
 'Churn Reason_Service dissatisfaction',
 'Churn Reason_nan']]



X=data.drop(['Churn Reason_Attitude of service provider',
 'Churn Reason_Attitude of support person',
 'Churn Reason_Competitor had better devices',
 'Churn Reason_Competitor made better offer',
 'Churn Reason_Competitor offered higher download speeds',
 'Churn Reason_Competitor offered more data',
 'Churn Reason_Deceased',
 "Churn Reason_Don't know",
 'Churn Reason_Extra data charges',
 'Churn Reason_Lack of affordable download/upload speed',
 'Churn Reason_Lack of self-service on Website',
 'Churn Reason_Limited range of services',
 'Churn Reason_Long distance charges',
 'Churn Reason_Moved',
 'Churn Reason_Network reliability',
 'Churn Reason_Poor expertise of online support',
 'Churn Reason_Poor expertise of phone support',
 'Churn Reason_Price too high',
 'Churn Reason_Product dissatisfaction',
 'Churn Reason_Service dissatisfaction',
 'Churn Reason_nan'],axis=1)

from sklearn.model_selection import train_test_split
X_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.2,random_state=0)
X_val,X_test,y_val,y_test=train_test_split(X_val,y_val,test_size=0.2,random_state=0)

?XGBClassifier

from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
model=XGBClassifier(max_depth=4,learning_rate=0.08,random_state=42,scale_pos_weight=4
                    ,n_estimators=70,reg_lambda=5,subsample=0.12,colsample_bytree=.5)
model.fit(X_train,y_train)
y_pred_v=model.predict(X_val)
y_pred_te=model.predict(X_test)
y_pred_tr=model.predict(X_train)
accuracy_tr=accuracy_score(y_train,y_pred_tr)
accuracy_v=accuracy_score(y_val,y_pred_v)
accuracy_te=accuracy_score(y_test,y_pred_te)
print("Train Accuracy:",accuracy_tr)
print("Val Accuracy:",accuracy_v)
print("test Accuracy:",accuracy_te)

#max_depth=4,learning_rate=0.08,random_state=42,scale_pos_weight=4,n_estimators=70,reg_lambda=5,subsample=0.12,colsample_bytree=.5

def colsample_bytree_acc(colsample_bytree):
    model=XGBClassifier(colsample_bytree=colsample_bytree)
    model.fit(X_train,y_train)
    y_pred_v=model.predict(X_val)
    y_pred_te=model.predict(X_test)
    y_pred_tr=model.predict(X_train)
    accuracy_tr=accuracy_score(y_train,y_pred_tr)
    accuracy_v=accuracy_score(y_val,y_pred_v)
    accuracy_te=accuracy_score(y_test,y_pred_te)
    return {'colsample_bytree':colsample_bytree,'Train Accuracy':accuracy_tr, 'Validation Accuracy': accuracy_v,'Test Accuracy':accuracy_te}

acc_df=pd.DataFrame([colsample_bytree_acc(i) for i in np.arange(.1,.2,.01)])
acc_df



