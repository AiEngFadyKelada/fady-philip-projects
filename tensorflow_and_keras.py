# -*- coding: utf-8 -*-
"""Tensorflow and keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CXyf9CYTBVQuhzBeDaY4j2fTAkw5M5H2
"""

import tensorflow as tf

mnist=tf.keras.datasets.mnist

(x_train,y_train),(x_test,y_test)=mnist.load_data()

x_train[5]

model=tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten(input_shape=(28,28)))

model.add(tf.keras.layers.Dense(128,activation=tf.nn.relu))  #dense layer = hidden layer and output layer
# softmax,elu,rely,tanh,sigmoid,linear
#hidden layers have less number of neurons than number of neurons in input layer and it must be 2 or 2**2 or 2**3 or 2**n
# number of neurons in output layer must equal number of classes that we need
# softmax is only used in output layer
model.add(tf.keras.layers.Dropout(0.2))
# drop out reduces overfitting and reduces number of used connected neurons
model.add(tf.keras.layers.Dense(10,activation=tf.nn.softmax)) #output layer

# compile has parameters like (optimizers= adam..gradient descent..stochastic gradient descent..adagrad...adadelta..etc, loss=saprse categorical crossentropy,metrics=['accuracy'])
#loss parameter used in regression "mes", loss used in binary classification "binary crossentropy" ,loss used in multi-class classification "categorical crossentropy"
#metrics =accuracy means show accuracy

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=6)

(model.predict(x_test))

val_loss,val_acc=model.evaluate(x_test,y_test)
print(val_loss)
print(val_acc)

model=tf.keras.models.Sequential([
 tf.keras.layers.Flatten(),
 tf.keras.layers.Dense(128,activation=tf.nn.relu),
 tf.keras.layers.Dense(128,activation=tf.nn.relu),
 tf.keras.layers.Dense(10,activation=tf.nn.softmax)
 ])

