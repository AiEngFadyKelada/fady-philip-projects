# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mN3tH3bqksSwYu7_oBolSbFcqnDLDl5d
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import models,layers,Sequential
from tensorflow.keras.regularizers import l2
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout,BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
import cv2
import os
from PIL import Image
!pip install kaggle
import json
from zipfile import ZipFile
kaggle_credentails = json.load(open("kaggle.json"))
os.environ['KAGGLE_USERNAME'] = kaggle_credentails["username"]
os.environ['KAGGLE_KEY'] = kaggle_credentails["key"]
!kaggle datasets download -d iarunava/cell-images-for-detecting-malaria
!ls
# Unzip the downloaded dataset
with ZipFile("cell-images-for-detecting-malaria.zip", 'r') as zip_ref:
    zip_ref.extractall()

image_dir="/content/cell_images/"

size=64
dataset=[]
labels=[]
parasitized_images=os.listdir(image_dir+'Parasitized/')
for i,image_name in enumerate(parasitized_images):
    if(image_name.split('.')[1]=='png'):
        image=cv2.imread(image_dir+'Parasitized/'+image_name)
        image=Image.fromarray(image,"RGB")
        image=image.resize((size,size))
        dataset.append(np.array(image))
        labels.append(0)

Uninfected_images=os.listdir(image_dir+'Uninfected/')
for i,image_name in enumerate(Uninfected_images):
    if(image_name.split('.')[1]=='png'):
        image=cv2.imread(image_dir+'Uninfected/'+image_name)
        image=Image.fromarray(image,"RGB")
        image=image.resize((size,size))
        dataset.append(np.array(image))
        labels.append(1)

from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
X_train,X_test,y_train,y_test=train_test_split(dataset,to_categorical(np.array(labels)),test_size=0.2,random_state=0)

from keras.layers import Convolution2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout
from keras.models import Sequential

model = Sequential()
model.add(Convolution2D(32, (3, 3), input_shape = (size, size, 3), activation = 'relu', data_format='channels_last'))
model.add(MaxPooling2D(pool_size = (2, 2), data_format="channels_last"))
model.add(BatchNormalization(axis = -1))
model.add(Dropout(0.2))
model.add(Convolution2D(32, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2), data_format="channels_last"))
model.add(BatchNormalization(axis = -1))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(activation = 'relu', units=512))
model.add(BatchNormalization(axis = -1))
model.add(Dropout(0.2))
model.add(Dense(activation = 'relu', units=256))
model.add(BatchNormalization(axis = -1))
model.add(Dropout(0.2))
model.add(Dense(activation = 'sigmoid', units=2))
model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])
print(model.summary())

history=model.fit(np.array(X_train),y_train,batch_size=64,epochs=25,verbose=1,validation_data=(np.array(X_test),y_test))

model.evaluate(np.array(X_train),y_train)
model.evaluate(np.array(X_test),y_test)

model.save("malaria_model.h5")

