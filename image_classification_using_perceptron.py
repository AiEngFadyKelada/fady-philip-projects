# -*- coding: utf-8 -*-
"""Image Classification using perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iu1MkThoANKOS7WRyaSQ0pVWPO4r_ViB
"""

import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import cv2
tf.compat.v1.disable_eager_execution()

import os
os.listdir('flowers//') #this function reads the names of the folders
flowers_types=os.listdir('flowers//')
flowers_types[1:]

images=[]
labels=[]
for i in flowers_types[1:]:
  print(i)
  data_path='flowers//'+str(i)
  filenames=[j for j in os.listdir(data_path) if j.endswith('.jpg')]
  print(filenames)
  for f in filenames:
    img=cv2.imread(data_path+'/'+f)
    img=cv2.resize(img,(60,60))
    images.append(img)
    labels.append(i)

labels

images

images = np.array(images)
images=images.astype('float32')/255

from sklearn.preprocessing import LabelEncoder,OneHotEncoder
x=images
y=labels
label_encoder=LabelEncoder()
y=label_encoder.fit_transform(y)
print(y)

y=y.reshape(-1,1)
onehotencoder = OneHotEncoder()
Y= onehotencoder.fit_transform(y)
y=Y.toarray()
print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size=0.2, random_state=0)
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

x_train=x_train.reshape((59,10800))
print(x_train.shape)
x_test=x_test.reshape((15,10800))
print(x_test.shape)

learning_rate=0.01
training_epochs=1000
n_dim=60
n_class=2


x=tf.compat.v1.placeholder(tf.float32,[None,10800])
w=tf.Variable(tf.zeros([10800,n_class]))
b=tf.Variable(tf.zeros([n_class]))
y= tf.compat.v1.placeholder(tf.float32,[None,n_class]) # actual y
init = tf.compat.v1.global_variables_initializer()
pred=tf.nn.softmax(tf.matmul(x,w)+b)
cost_func= tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))
optimizer=tf.compat.v1.train.GradientDescentOptimizer(learning_rate).minimize(cost_func)

sess = tf.compat.v1.Session()
sess.run(init)
cost_history = []
for epoch in range(training_epochs):
    sess.run(optimizer,feed_dict={x: x_train,y: y_train})
    cost = sess.run(cost_func,feed_dict={x: x_train,y: y_train})
    cost_history = np.append(cost_history,cost)
    print('epoch : ', epoch,  ' - ', 'cost: ', cost)

y_pred = sess.run(pred, feed_dict={x: x_test})