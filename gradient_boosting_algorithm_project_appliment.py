# -*- coding: utf-8 -*-
"""Gradient Boosting Algorithm Project appliment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VOBjyOHE3mFLhjUnvpaNz4RAQWWUlmep
"""

import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix,accuracy_score
import seaborn as sns
import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import StratifiedKFold

"""#  **Part 1**"""

breast_cancer = sklearn.datasets.load_breast_cancer()

print(breast_cancer)

"""#Applying RandomForestClassifier Model

'''
ensemble.RandomForestClassifier(n_estimators='warn’, criterion=’gini’, max_depth=None,
                                min_samples_split=2, min_samples_leaf=1,min_weight_fraction_leaf=0.0,
                                max_features='auto’,max_leaf_nodes=None,min_impurity_decrease=0.0,
                                min_impurity_split=None, bootstrap=True,oob_score=False, n_jobs=None,
                                random_state=None, verbose=0,warm_start=False, class_weight=None)
'''

"""

data_frame = pd.DataFrame(breast_cancer.data, columns = breast_cancer.feature_names)

data_frame.head()

data_frame['label'] = breast_cancer.target

data_frame.describe()

data_frame['label'].value_counts()

data_frame.groupby('label').mean()

X = data_frame.drop(columns='label', axis=1)
Y = data_frame['label']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)
print(X.shape, X_train.shape, X_test.shape)

GBCmodel=GradientBoostingClassifier(n_estimators=100,max_depth=5,min_samples_split=2,learning_rate=0.1,random_state=33)
GBCmodel.fit(X_train,Y_train)

y_pred=GBCmodel.predict(X_test)

print("GBCmodel train score is: ",GBCmodel.score(X_train, Y_train))
print("GBCmodel test score is: ",GBCmodel.score(X_test, Y_test))
print("Confusion Matrix: \n",confusion_matrix(Y_test, y_pred))

print(y_pred.shape)
print(Y_test.shape)

sns.heatmap(confusion_matrix(Y_test, y_pred), center = True)
plt.show()



"""#  **Part 2**"""

make_hastie=sklearn.datasets.make_hastie_10_2(random_state=0)
make_hastie

X,y=make_hastie
X_train=X[:10000]
y_train=y[:10000]
X_test=X[10000:]
y_test=y[10000:]

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

clf=GradientBoostingClassifier(n_estimators=1000,learning_rate=1,random_state=0)
clf.fit(X_train,y_train)

clf.score(X_train,y_train)
y_pred=clf.predict(X_test)
cm=confusion_matrix(y_test,y_pred)
sns.heatmap(cm, center = True)
plt.show()

data=sklearn.datasets.load_breast_cancer()
X=data.data
y=data.target

skf=StratifiedKFold(n_splits=5)
p_rf=np.zeros(y.shape[0])
print(p_rf)

for i in range(10,100,10):
  for train,test in skf.split(X,y):
    X_train=X[train]
    y_train=y[train]
    X_test=X[test]
    y_test=y[test]
    clf=GradientBoostingClassifier(n_estimators=100,learning_rate=1.0,max_depth=1,random_state=0)
    clf.fit(X_train,y_train)
    y_pred=clf.predict(X_test)
    cm=confusion_matrix(y_test,y_pred)
    print(cm)
  print("score:",accuracy_score(y_test,y_pred))











