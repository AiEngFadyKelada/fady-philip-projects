# -*- coding: utf-8 -*-
"""Loan Status Prediction using S.V.M - ML Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BlqdP_MQc5iPM2Q9qEacJqSf5w3OgzL1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

loan_dataset = pd.read_csv('Loan prediction.csv')

loan_dataset.head()

loan_dataset.shape

loan_dataset2=loan_dataset.drop('Loan_ID',axis=1)
loan_dataset2.shape

loan_dataset2.head()

loan_dataset2.info()

loan_dataset2.describe()

type(loan_dataset2)

loan_dataset2.isnull().sum()

loan_dataset2.columns

loan_dataset2.dropna(subset=['Gender', 'Married', 'Dependents','Education',
       'Self_Employed','Property_Area'],inplace=True)

loan_dataset2.info()

loan_dataset2.isnull().sum()

numeric_cols=list(loan_dataset2.select_dtypes('number').columns)
categorical_cols=list(loan_dataset2.select_dtypes('object').columns)

numeric_cols

categorical_cols

loan_dataset2[numeric_cols].describe()

loan_dataset2[numeric_cols].nunique()

loan_dataset2[categorical_cols].nunique()

loan_dataset2['Credit_History'].unique()

loan_dataset2['Property_Area'].unique()

loan_dataset2[numeric_cols].isna().sum()

from sklearn.impute import SimpleImputer
imputer=SimpleImputer(strategy='mean')

imputer.fit(loan_dataset2[numeric_cols])

list(imputer.statistics_)

loan_dataset2[numeric_cols]=imputer.transform(loan_dataset2[numeric_cols])

loan_dataset2[numeric_cols]



loan_dataset2[numeric_cols].isna().sum()

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(loan_dataset2[numeric_cols])
loan_dataset2[numeric_cols]=scaler.transform(loan_dataset2[numeric_cols])

loan_dataset2[categorical_cols].nunique()

loan_dataset2[categorical_cols].columns

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
le.fit(loan_dataset2['Property_Area'])
loan_dataset2['Property_Area'] = le.transform(loan_dataset2['Property_Area'])

le.fit(loan_dataset2['Dependents'])
loan_dataset2['Dependents'] = le.transform(loan_dataset2['Dependents'])

loan_dataset2['Dependents'].unique()

loan_dataset2['Property_Area'].unique()

from sklearn.preprocessing import OneHotEncoder
encoder=OneHotEncoder(sparse=False,handle_unknown='ignore')
encoder.fit(loan_dataset2[['Gender', 'Married', 'Education', 'Self_Employed']])

encoder.categories_

encoded_cols = list(encoder.get_feature_names_out(['Gender', 'Married', 'Education', 'Self_Employed']))
encoded_cols

loan_dataset2[encoded_cols] = encoder.transform(loan_dataset2[['Gender', 'Married', 'Education', 'Self_Employed']].fillna('unknown'))

X= pd.concat([loan_dataset2[numeric_cols],loan_dataset2[['Dependents','Property_Area']], loan_dataset2[encoded_cols]],axis=1)
Y=loan_dataset2['Loan_Status']

X

Y.shape

X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape, X_train.shape, X_test.shape)

model = svm.SVC(kernel='linear')

model.fit(X_train,Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuray = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data : ', training_data_accuray)

X_test_prediction = model.predict(X_test)
test_data_accuray = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data : ', test_data_accuray)

print(f"X_train_prediction:  {X_train_prediction}","\n\n",f"X_test_prediction:  {X_test_prediction}")

